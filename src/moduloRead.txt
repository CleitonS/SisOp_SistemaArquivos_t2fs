int read2(FILE2 handle, char *buffer, int size){
	struct t2fs_inode inode;
	int bytesRestantes,blocoInicial,i,j;
	init();
	i = 0; 
	if(fileHandleList[handle].validade == NAO_VALIDO)
		return -1;
	
	if(fileHandleList[handle].inodeNumber < 0)
		return -2;
	


	inode =  leInode(fileHandleList[handle].inodeNumber);
	bytesRestantes = inode.bytesFileSize - fileHandleList[handle].seekPtr ;
	blocoInicial = fileHandleList[handle].seekPtr/tamanhoBlocoBytes;
	//verifica se o arquivo nao 'e vazio
	if(inode.bytesFileSize == 0){
		refreshCurrentPath();
		return 0;
	}





	if(blocoInicial == 0){
		if(i < tamanhoBlocoBytes)
			j = fileHandleList[handle].seekPtr % tamanhoBlocoBytes;
		else 
			j = 0;
	
		if(i<bytesRestantes && i <size) {
			carregaBloco(inode.dataPtr[0]);
		}
		for(; j < tamanhoBlocoBytes && i < size && i < bytesRestantes;i++,j++){
			buffer[i] = blocoAtual[j];
		} 
	}
	if(blocoInicial == 1){
		if(i < tamanhoBlocoBytes)
			j = fileHandleList[handle].seekPtr % tamanhoBlocoBytes;
		else 
			j = 0;
	
		if(i<bytesRestantes && i <size) 
			carregaBloco(inode.dataPtr[1]);
		for(j=0; j < tamanhoBlocoBytes && i < size &&  i < bytesRestantes;i++,j++){
			buffer[i] = blocoAtual[j];
		} 
	}
	//leitura bytes indirecao
	if (bytesRestantes > 0){
		//read 
		readArquivoIndirecao(inode.singleIndPtr,blocoInicial,&bytesRestantes,size,buffer,&i,handle);
	}
	if(bytesRestantes > 0){
		readArquivoDuplaIndirecao(inode.singleIndPtr,blocoInicial,&bytesRestantes,size,buffer,&i,handle);

	}
	fileHandleList[handle].seekPtr += i;
	refreshCurrentPath();
	return i;		

}
